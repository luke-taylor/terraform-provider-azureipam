// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package data_sources

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func ReservationsDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"block": schema.StringAttribute{
				Required:            true,
				Description:         "Name of the target Block",
				MarkdownDescription: "Name of the target Block",
			},
			"reservations": schema.SetNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"block": schema.StringAttribute{
							Computed: true,
						},
						"cidr": schema.StringAttribute{
							Computed: true,
						},
						"created_by": schema.StringAttribute{
							Computed: true,
						},
						"created_on": schema.NumberAttribute{
							Computed: true,
						},
						"desc": schema.StringAttribute{
							Computed: true,
						},
						"id": schema.StringAttribute{
							Computed: true,
						},
						"settled_by": schema.StringAttribute{
							Computed: true,
						},
						"settled_on": schema.NumberAttribute{
							Computed: true,
						},
						"space": schema.StringAttribute{
							Computed: true,
						},
						"status": schema.StringAttribute{
							Computed: true,
						},
						"tag": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{},
							CustomType: TagType{
								ObjectType: types.ObjectType{
									AttrTypes: TagValue{}.AttributeTypes(ctx),
								},
							},
							Computed: true,
						},
					},
					CustomType: ReservationsType{
						ObjectType: types.ObjectType{
							AttrTypes: ReservationsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed: true,
			},
			"settled": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Include settled reservations.",
				MarkdownDescription: "Include settled reservations.",
			},
			"space": schema.StringAttribute{
				Required:            true,
				Description:         "Name of the target Space",
				MarkdownDescription: "Name of the target Space",
			},
		},
	}
}

type ReservationsModel struct {
	Block        types.String `tfsdk:"block"`
	Reservations types.Set    `tfsdk:"reservations"`
	Settled      types.Bool   `tfsdk:"settled"`
	Space        types.String `tfsdk:"space"`
}

var _ basetypes.ObjectTypable = ReservationsType{}

type ReservationsType struct {
	basetypes.ObjectType
}

func (t ReservationsType) Equal(o attr.Type) bool {
	other, ok := o.(ReservationsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ReservationsType) String() string {
	return "ReservationsType"
}

func (t ReservationsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	blockAttribute, ok := attributes["block"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`block is missing from object`)

		return nil, diags
	}

	blockVal, ok := blockAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`block expected to be basetypes.StringValue, was: %T`, blockAttribute))
	}

	cidrAttribute, ok := attributes["cidr"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`cidr is missing from object`)

		return nil, diags
	}

	cidrVal, ok := cidrAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`cidr expected to be basetypes.StringValue, was: %T`, cidrAttribute))
	}

	createdByAttribute, ok := attributes["created_by"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_by is missing from object`)

		return nil, diags
	}

	createdByVal, ok := createdByAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_by expected to be basetypes.StringValue, was: %T`, createdByAttribute))
	}

	createdOnAttribute, ok := attributes["created_on"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_on is missing from object`)

		return nil, diags
	}

	createdOnVal, ok := createdOnAttribute.(basetypes.NumberValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_on expected to be basetypes.NumberValue, was: %T`, createdOnAttribute))
	}

	descAttribute, ok := attributes["desc"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`desc is missing from object`)

		return nil, diags
	}

	descVal, ok := descAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`desc expected to be basetypes.StringValue, was: %T`, descAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	settledByAttribute, ok := attributes["settled_by"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`settled_by is missing from object`)

		return nil, diags
	}

	settledByVal, ok := settledByAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`settled_by expected to be basetypes.StringValue, was: %T`, settledByAttribute))
	}

	settledOnAttribute, ok := attributes["settled_on"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`settled_on is missing from object`)

		return nil, diags
	}

	settledOnVal, ok := settledOnAttribute.(basetypes.NumberValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`settled_on expected to be basetypes.NumberValue, was: %T`, settledOnAttribute))
	}

	spaceAttribute, ok := attributes["space"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`space is missing from object`)

		return nil, diags
	}

	spaceVal, ok := spaceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`space expected to be basetypes.StringValue, was: %T`, spaceAttribute))
	}

	statusAttribute, ok := attributes["status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`status is missing from object`)

		return nil, diags
	}

	statusVal, ok := statusAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`status expected to be basetypes.StringValue, was: %T`, statusAttribute))
	}

	tagAttribute, ok := attributes["tag"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tag is missing from object`)

		return nil, diags
	}

	tagVal, ok := tagAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tag expected to be basetypes.ObjectValue, was: %T`, tagAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ReservationsValue{
		Block:     blockVal,
		Cidr:      cidrVal,
		CreatedBy: createdByVal,
		CreatedOn: createdOnVal,
		Desc:      descVal,
		Id:        idVal,
		SettledBy: settledByVal,
		SettledOn: settledOnVal,
		Space:     spaceVal,
		Status:    statusVal,
		Tag:       tagVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewReservationsValueNull() ReservationsValue {
	return ReservationsValue{
		state: attr.ValueStateNull,
	}
}

func NewReservationsValueUnknown() ReservationsValue {
	return ReservationsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewReservationsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ReservationsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ReservationsValue Attribute Value",
				"While creating a ReservationsValue value, a missing attribute value was detected. "+
					"A ReservationsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ReservationsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ReservationsValue Attribute Type",
				"While creating a ReservationsValue value, an invalid attribute value was detected. "+
					"A ReservationsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ReservationsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ReservationsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ReservationsValue Attribute Value",
				"While creating a ReservationsValue value, an extra attribute value was detected. "+
					"A ReservationsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ReservationsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewReservationsValueUnknown(), diags
	}

	blockAttribute, ok := attributes["block"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`block is missing from object`)

		return NewReservationsValueUnknown(), diags
	}

	blockVal, ok := blockAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`block expected to be basetypes.StringValue, was: %T`, blockAttribute))
	}

	cidrAttribute, ok := attributes["cidr"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`cidr is missing from object`)

		return NewReservationsValueUnknown(), diags
	}

	cidrVal, ok := cidrAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`cidr expected to be basetypes.StringValue, was: %T`, cidrAttribute))
	}

	createdByAttribute, ok := attributes["created_by"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_by is missing from object`)

		return NewReservationsValueUnknown(), diags
	}

	createdByVal, ok := createdByAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_by expected to be basetypes.StringValue, was: %T`, createdByAttribute))
	}

	createdOnAttribute, ok := attributes["created_on"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_on is missing from object`)

		return NewReservationsValueUnknown(), diags
	}

	createdOnVal, ok := createdOnAttribute.(basetypes.NumberValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_on expected to be basetypes.NumberValue, was: %T`, createdOnAttribute))
	}

	descAttribute, ok := attributes["desc"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`desc is missing from object`)

		return NewReservationsValueUnknown(), diags
	}

	descVal, ok := descAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`desc expected to be basetypes.StringValue, was: %T`, descAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewReservationsValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	settledByAttribute, ok := attributes["settled_by"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`settled_by is missing from object`)

		return NewReservationsValueUnknown(), diags
	}

	settledByVal, ok := settledByAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`settled_by expected to be basetypes.StringValue, was: %T`, settledByAttribute))
	}

	settledOnAttribute, ok := attributes["settled_on"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`settled_on is missing from object`)

		return NewReservationsValueUnknown(), diags
	}

	settledOnVal, ok := settledOnAttribute.(basetypes.NumberValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`settled_on expected to be basetypes.NumberValue, was: %T`, settledOnAttribute))
	}

	spaceAttribute, ok := attributes["space"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`space is missing from object`)

		return NewReservationsValueUnknown(), diags
	}

	spaceVal, ok := spaceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`space expected to be basetypes.StringValue, was: %T`, spaceAttribute))
	}

	statusAttribute, ok := attributes["status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`status is missing from object`)

		return NewReservationsValueUnknown(), diags
	}

	statusVal, ok := statusAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`status expected to be basetypes.StringValue, was: %T`, statusAttribute))
	}

	tagAttribute, ok := attributes["tag"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tag is missing from object`)

		return NewReservationsValueUnknown(), diags
	}

	tagVal, ok := tagAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tag expected to be basetypes.ObjectValue, was: %T`, tagAttribute))
	}

	if diags.HasError() {
		return NewReservationsValueUnknown(), diags
	}

	return ReservationsValue{
		Block:     blockVal,
		Cidr:      cidrVal,
		CreatedBy: createdByVal,
		CreatedOn: createdOnVal,
		Desc:      descVal,
		Id:        idVal,
		SettledBy: settledByVal,
		SettledOn: settledOnVal,
		Space:     spaceVal,
		Status:    statusVal,
		Tag:       tagVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewReservationsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ReservationsValue {
	object, diags := NewReservationsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewReservationsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ReservationsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewReservationsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewReservationsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewReservationsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewReservationsValueMust(ReservationsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ReservationsType) ValueType(ctx context.Context) attr.Value {
	return ReservationsValue{}
}

var _ basetypes.ObjectValuable = ReservationsValue{}

type ReservationsValue struct {
	Block     basetypes.StringValue `tfsdk:"block"`
	Cidr      basetypes.StringValue `tfsdk:"cidr"`
	CreatedBy basetypes.StringValue `tfsdk:"created_by"`
	CreatedOn basetypes.NumberValue `tfsdk:"created_on"`
	Desc      basetypes.StringValue `tfsdk:"desc"`
	Id        basetypes.StringValue `tfsdk:"id"`
	SettledBy basetypes.StringValue `tfsdk:"settled_by"`
	SettledOn basetypes.NumberValue `tfsdk:"settled_on"`
	Space     basetypes.StringValue `tfsdk:"space"`
	Status    basetypes.StringValue `tfsdk:"status"`
	Tag       basetypes.ObjectValue `tfsdk:"tag"`
	state     attr.ValueState
}

func (v ReservationsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 11)

	var val tftypes.Value
	var err error

	attrTypes["block"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["cidr"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["created_by"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["created_on"] = basetypes.NumberType{}.TerraformType(ctx)
	attrTypes["desc"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["settled_by"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["settled_on"] = basetypes.NumberType{}.TerraformType(ctx)
	attrTypes["space"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["status"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["tag"] = basetypes.ObjectType{
		AttrTypes: TagValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 11)

		val, err = v.Block.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["block"] = val

		val, err = v.Cidr.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["cidr"] = val

		val, err = v.CreatedBy.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["created_by"] = val

		val, err = v.CreatedOn.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["created_on"] = val

		val, err = v.Desc.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["desc"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.SettledBy.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["settled_by"] = val

		val, err = v.SettledOn.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["settled_on"] = val

		val, err = v.Space.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["space"] = val

		val, err = v.Status.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["status"] = val

		val, err = v.Tag.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["tag"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ReservationsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ReservationsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ReservationsValue) String() string {
	return "ReservationsValue"
}

func (v ReservationsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var tag basetypes.ObjectValue

	if v.Tag.IsNull() {
		tag = types.ObjectNull(
			TagValue{}.AttributeTypes(ctx),
		)
	}

	if v.Tag.IsUnknown() {
		tag = types.ObjectUnknown(
			TagValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Tag.IsNull() && !v.Tag.IsUnknown() {
		tag = types.ObjectValueMust(
			TagValue{}.AttributeTypes(ctx),
			v.Tag.Attributes(),
		)
	}

	attributeTypes := map[string]attr.Type{
		"block":      basetypes.StringType{},
		"cidr":       basetypes.StringType{},
		"created_by": basetypes.StringType{},
		"created_on": basetypes.NumberType{},
		"desc":       basetypes.StringType{},
		"id":         basetypes.StringType{},
		"settled_by": basetypes.StringType{},
		"settled_on": basetypes.NumberType{},
		"space":      basetypes.StringType{},
		"status":     basetypes.StringType{},
		"tag": basetypes.ObjectType{
			AttrTypes: TagValue{}.AttributeTypes(ctx),
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"block":      v.Block,
			"cidr":       v.Cidr,
			"created_by": v.CreatedBy,
			"created_on": v.CreatedOn,
			"desc":       v.Desc,
			"id":         v.Id,
			"settled_by": v.SettledBy,
			"settled_on": v.SettledOn,
			"space":      v.Space,
			"status":     v.Status,
			"tag":        tag,
		})

	return objVal, diags
}

func (v ReservationsValue) Equal(o attr.Value) bool {
	other, ok := o.(ReservationsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Block.Equal(other.Block) {
		return false
	}

	if !v.Cidr.Equal(other.Cidr) {
		return false
	}

	if !v.CreatedBy.Equal(other.CreatedBy) {
		return false
	}

	if !v.CreatedOn.Equal(other.CreatedOn) {
		return false
	}

	if !v.Desc.Equal(other.Desc) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.SettledBy.Equal(other.SettledBy) {
		return false
	}

	if !v.SettledOn.Equal(other.SettledOn) {
		return false
	}

	if !v.Space.Equal(other.Space) {
		return false
	}

	if !v.Status.Equal(other.Status) {
		return false
	}

	if !v.Tag.Equal(other.Tag) {
		return false
	}

	return true
}

func (v ReservationsValue) Type(ctx context.Context) attr.Type {
	return ReservationsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ReservationsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"block":      basetypes.StringType{},
		"cidr":       basetypes.StringType{},
		"created_by": basetypes.StringType{},
		"created_on": basetypes.NumberType{},
		"desc":       basetypes.StringType{},
		"id":         basetypes.StringType{},
		"settled_by": basetypes.StringType{},
		"settled_on": basetypes.NumberType{},
		"space":      basetypes.StringType{},
		"status":     basetypes.StringType{},
		"tag": basetypes.ObjectType{
			AttrTypes: TagValue{}.AttributeTypes(ctx),
		},
	}
}

var _ basetypes.ObjectTypable = TagType{}

type TagType struct {
	basetypes.ObjectType
}

func (t TagType) Equal(o attr.Type) bool {
	other, ok := o.(TagType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t TagType) String() string {
	return "TagType"
}

func (t TagType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	if diags.HasError() {
		return nil, diags
	}

	return TagValue{
		state: attr.ValueStateKnown,
	}, diags
}

func NewTagValueNull() TagValue {
	return TagValue{
		state: attr.ValueStateNull,
	}
}

func NewTagValueUnknown() TagValue {
	return TagValue{
		state: attr.ValueStateUnknown,
	}
}

func NewTagValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (TagValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing TagValue Attribute Value",
				"While creating a TagValue value, a missing attribute value was detected. "+
					"A TagValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("TagValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid TagValue Attribute Type",
				"While creating a TagValue value, an invalid attribute value was detected. "+
					"A TagValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("TagValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("TagValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra TagValue Attribute Value",
				"While creating a TagValue value, an extra attribute value was detected. "+
					"A TagValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra TagValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewTagValueUnknown(), diags
	}

	if diags.HasError() {
		return NewTagValueUnknown(), diags
	}

	return TagValue{
		state: attr.ValueStateKnown,
	}, diags
}

func NewTagValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) TagValue {
	object, diags := NewTagValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewTagValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t TagType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewTagValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewTagValueUnknown(), nil
	}

	if in.IsNull() {
		return NewTagValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewTagValueMust(TagValue{}.AttributeTypes(ctx), attributes), nil
}

func (t TagType) ValueType(ctx context.Context) attr.Value {
	return TagValue{}
}

var _ basetypes.ObjectValuable = TagValue{}

type TagValue struct {
	state attr.ValueState
}

func (v TagValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 0)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 0)

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v TagValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v TagValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v TagValue) String() string {
	return "TagValue"
}

func (v TagValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{})

	return objVal, diags
}

func (v TagValue) Equal(o attr.Value) bool {
	other, ok := o.(TagValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	return true
}

func (v TagValue) Type(ctx context.Context) attr.Type {
	return TagType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v TagValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{}
}
